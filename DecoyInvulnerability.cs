using System;
using XRL.Language;

namespace XRL.World.Parts
{
	[Serializable]
	public class DecoyInvulnerability : IPart
	{
		public override bool WantEvent(int ID, int cascade)
		{
			if (ID == RespiresEvent.ID || ID == CanBeDismemberedEvent.ID || ID == CanBeInvoluntarilyMovedEvent.ID || ID == GetMaximumLiquidExposureEvent.ID)
			{
				return true;
			}
			return base.WantEvent(ID, cascade);
		}

		public override bool HandleEvent(CanBeDismemberedEvent E)
		{
			if (E.Object == ParentObject)
			{
				return false;
			}
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(CanBeInvoluntarilyMovedEvent E)
		{
			if (E.Object == ParentObject)
			{
				return false;
			}
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(GetMaximumLiquidExposureEvent E)
		{
			E.PercentageReduction = 100;
			return false;
		}

		public override bool HandleEvent(RespiresEvent E)
		{
			return false;
		}

		public override bool AllowStaticRegistration()
		{
			return true;
		}

		public override void Register(GameObject Object, IEventRegistrar Registrar)
		{
			Registrar.Register("BeforeApplyDamage");
			base.Register(Object, Registrar);
		}

		public override bool FireEvent(Event E)
		{
			if (E.ID == "BeforeApplyDamage")
			{
				GameObject gameObjectParameter = E.GetGameObjectParameter("Owner");
				if (gameObjectParameter != null)
				{
					if (gameObjectParameter != null && (
						gameObjectParameter.IsPlayer() ||
						IComponent<GameObject>.Visible(gameObjectParameter)
					))
					{
						string text = IComponent<GameObject>.ConsequentialColor(ParentObject);
						string whose = gameObjectParameter.IsPlayer() ? "your" : Grammar.MakePossessive(gameObjectParameter.the + gameObjectParameter.DisplayNameOnly);
						IComponent<GameObject>.AddPlayerMessage($"{text + ParentObject.The + ParentObject.DisplayNameOnly} reforms itself around {whose} attack, which passes harmlessly through {ParentObject.it + text}.");
						E.SetParameter("DidSpecialEffect", 1);
					}
				}
				return false;
			}
			return base.FireEvent(E);
		}
	}
}
